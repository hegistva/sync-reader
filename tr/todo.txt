Check the named entity resolver in spacy - demo ready
Check and use POS tagging information in spacy
Check and use glove similarity once translated
Use the distance from the expected positions
Interpolate where there is no information
Create candidate alignments and find the best
Create and use a dictionary with our successful alignment on word and lemma level

Design:
1. map sentences by beads
2. crate spacy spans for each bead in both language
3. each token maps to each token with a probabilty by each feature Features x (N x M)
Features:
    NAMED ENTITY RECOGNITION + LEVENSHTEIN DISTANCE + POSITION - MAPPING
    LEMMA TRANSLATION EXACT + POS TAGGING + WORD2VEC SIMILARITY + POSITION + LEVENSHTEIN DISTANCE [Except named entities] - MAPPING
    HOW TO USE EXISTING ALIGNMENTS (LEMMA or TOKEN?)

Then add maximum 16 2x branches

Numbers 
Probabilities
Percentages

Investigate spacy document spans

map form both directions to reduce errors

Tag why how each phrase was mapped

0. add tags - DONE
1. further map further in the child nodes - DONE
2. create module for glove with cache - DONE
	- integrate glove vectors into the mapping - DONE
2.1 integrate the dico  translations into the data model - DONE
2.2 try matching multiword translations
3. use glove vectors to improve translation
	- important nodes first
	- then map all remaining translatables
	- then map all remaining glove
	- then POS
	- then distance (remaining named entities)
	- then map the rest by interpolation

4. finalize mapping by interpolation
5. find out the depth of each node - DONE
6. find out if a node has mapped parent - DONE
7. make sure to build a graph of mapped tokens - DONE
8. fine tune the probabilities
9. when smooth out the mapping around highly probably translations
10. learning !!! (words, tuples, triplets)
11. add tracing for glove similarity - IN PROGRESS
12. make sure we can call the mapping as a function - IN PROGRESS
13. export mapping information
14. android client
15. firebase
16. explore phrases in spacy
17. iteratively build and use mapping probabilities
	- sentence matcher
	- structural mapper
	- dependentm mapper
	- translate mapper
	- glove mapper
	- make sure we avoid having very short sentences (DONE)
	- implement post processing to map unmapped tokens